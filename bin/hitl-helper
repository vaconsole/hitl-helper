#!/usr/bin/env node
const program = require('commander')
const Database = require('better-sqlite3')
const jsonfile = require('jsonfile')
const {
  createJob,
  jsonCreateTable,
  insertJsonToTable,
  getJob,
  updateJob,
  submitJob,
  acceptJob,
  assignJob,
  rejectJob,
} = require('../lib/index')

program
  .command('create <dbPath> <sql> <pk> [description]')
  .action((dbPath, sql, pk, description = '') => {
    const db = new Database(dbPath)
    return createJob({ db, description, sql, pk })
  })

program.command('update <dbPath> <job_id>').action((dbPath, job_id) => {
  const db = new Database(dbPath)
  return updateJob({ db, job_id })
})

program.command('get <dbPath> <job_id>').action((dbPath, job_id) => {
  const db = new Database(dbPath)
  console.log(JSON.stringify(getJob({ db, job_id })))
})

program.command('assign <dbPath> <job_id>').action((dbPath, job_id) => {
  const db = new Database(dbPath)
  return assignJob({ db, job_id })
})

program
  .command('submit <jsonDataPath> <dbPath> <job_id>')
  .action((jsonDataPath, dbPath, job_id) => {
    const db = new Database(dbPath)
    const data = jsonfile.readFileSync(jsonDataPath)
    return submitJob(data, { db, job_id })
  })

program.command('accept <dbPath> <job_id>').action((dbPath, job_id) => {
  const db = new Database(dbPath)
  return acceptJob({ db, job_id })
})

program.command('reject <dbPath> <job_id>').action((dbPath, job_id) => {
  const db = new Database(dbPath)
  return rejectJob({ db, job_id })
})

program
  .command('match <dbPath> <table> <indexColumns>')
  .action((dbPath, table, indexColumns) => {
    const db = new Database(dbPath)
    match(db, table, indexColumns.split(','))
  })

program.parse(process.argv)
